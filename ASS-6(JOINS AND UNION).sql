CREATE DATABASE JOINSUNIONS;
USE JOINSUNIONS;

-- Create and populate the COUNTRY2 table
CREATE TABLE COUNTRY2(
    ID INT PRIMARY KEY,
    COUNTRY_NAME VARCHAR(50),
    POPULATION INT,
    AREA FLOAT
);

INSERT INTO COUNTRY2 (ID, COUNTRY_NAME, POPULATION, AREA)
VALUES 
(1, 'USA', 331000000, 9834000),
(2, 'India', 1400000000, 3287000),
(3, 'China', 1440000000, 9597000),
(4, 'Brazil', 213000000, 8516000),
(5, 'Russia', 146000000, 17098200),
(6, 'Japan', 126000000, 377975),
(7, 'Germany', 83000000, 357386),
(8, 'UK', 67000000, 242495),
(9, 'France', 67000000, 551695),
(10, 'Australia', 25600000, 7692024);



SELECT * FROM COUNTRY2;

-- Create and populate the PERSONS2 table
CREATE TABLE PERSONS2(
    ID INT PRIMARY KEY,
    F_NAME VARCHAR(50),
    L_NAME VARCHAR(50),
    POPULATION INT,
    RATING FLOAT,
    COUNTRY_ID INT,
    COUNTRY_NAME VARCHAR(50),
    FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRY2(ID)
);

INSERT INTO PERSONS2 (ID, F_NAME, L_NAME, POPULATION, RATING, COUNTRY_ID, COUNTRY_NAME)
VALUES
(1, 'John', 'Doe', 5000, 4.5, 1, 'USA'),
(2, 'Jane', 'Smith', 6000, 4.7, 1, 'USA'),
(3, 'Raj', 'Kumar', 7000, 4.9, 2, 'India'),
(4, 'Wei', 'Zhang', 5500, 4.6, 3, 'China'),
(5, 'Ana', 'Silva', 5000, 4.8, 4, 'Brazil'),
(6, 'Olga', 'Ivanova', 3000, 4.3, 5, 'Russia'),
(7, 'Taro', 'Yamamoto', 2000, 4.4, 6, 'Japan'),
(8, 'Hans', 'MÃ¼ller', 2500, 4.2, 7, 'Germany'),
(9, 'Emma', 'Brown', 4000, 4.5, 8, 'UK'),
(10, 'Jean', 'Dupont', 3000, 4.1, 9, 'France');

INSERT INTO PERSONS2(ID, F_NAME, L_NAME, POPULATION, RATING, COUNTRY_ID, COUNTRY_NAME) VALUES 
(11,'Louis','Drake',2500,4.2,7,'Germany'),(12, 'Iyrol', 'zin' ,2000, 4.4, 6, 'Japan');
SELECT * FROM PERSONS2;


-- (1) Perform INNER JOIN, LEFT JOIN, and RIGHT JOIN on the tables
-- INNER JOIN
SELECT PERSONS2.ID,PERSONS2.F_NAME,PERSONS2.COUNTRY_NAME,COUNTRY2.ID AS COUNTRY_ID
FROM PERSONS2 
INNER JOIN COUNTRY2 ON PERSONS2.COUNTRY_ID = COUNTRY2.ID;

-- LEFT JOIN
SELECT PERSONS2.ID,PERSONS2.F_NAME,PERSONS2.COUNTRY_NAME,COUNTRY2.ID AS COUNTRY_ID
FROM PERSONS2 
LEFT JOIN COUNTRY2 ON PERSONS2.COUNTRY_ID = COUNTRY2.ID;


-- (2) List all distinct country names from both the Country and Persons tables

SELECT DISTINCT COUNTRY_NAME FROM COUNTRY2
UNION 
SELECT DISTINCT COUNTRY_NAME FROM PERSONS2;

-- (3) List all country names from both the Country and Persons tables, including duplicates
SELECT COUNTRY_NAME FROM COUNTRY2
UNION ALL
SELECT COUNTRY_NAME FROM PERSONS2;

-- (4) Round the ratings of all persons to the nearest integer in the Persons table
SELECT ID,F_NAME,L_NAME,ROUND(RATING)AS ROUNDED_RATINGS FROM PERSONS2;
